#!/bin/bash

# NFS Configuration Manager
# Monitors /etc/nfs-web-ui/exports.json and applies changes to /etc/exports

CONFIG_FILE="/etc/nfs-web-ui/exports.json"
EXPORTS_FILE="/etc/exports"
TEMP_EXPORTS="/var/tmp/exports.tmp"
LOG_FILE="/var/log/nfs-config-manager.log"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to check if jq is available
check_jq() {
    if command -v jq >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Function to parse JSON using jq or python fallback
parse_json() {
    local json_file="$1"
    
    if check_jq; then
        jq -r '.exports[] | "\(.path) \(.clients | map("\(.ip)(\(.permission))") | join(" "))"' "$json_file" 2>/dev/null
    else
        python3 -c "
import json
import sys
try:
    with open('$json_file', 'r') as f:
        data = json.load(f)
    for export in data.get('exports', []):
        path = export.get('path', '')
        clients = export.get('clients', [])
        client_str = ' '.join([f'{c[\"ip\"]}({c[\"permission\"]})' for c in clients])
        print(f'{path} {client_str}')
except Exception as e:
    print(f'Error parsing JSON: {e}', file=sys.stderr)
    sys.exit(1)
" 2>/dev/null
    fi
}

# Function to generate /etc/exports from JSON config
generate_exports() {
    log "Generating /etc/exports from configuration..."
    
    # Create temporary exports file
    cat > "$TEMP_EXPORTS" << EOF
# NFS Exports Configuration
# Generated by nfs-config-manager on $(date)
# Do not edit this file manually - changes will be overwritten

EOF
    
    # Parse JSON and add exports
    if [[ -f "$CONFIG_FILE" ]]; then
        parse_json "$CONFIG_FILE" >> "$TEMP_EXPORTS"
        
        if [[ $? -eq 0 ]]; then
            log "Configuration parsed successfully"
        else
            log "ERROR: Failed to parse configuration file"
            return 1
        fi
    else
        log "WARNING: Configuration file not found, creating empty exports"
    fi
    
    # Add newline at end
    echo "" >> "$TEMP_EXPORTS"
    
    # Validate the generated file
    if [[ -s "$TEMP_EXPORTS" ]]; then
        log "Generated exports file is valid"
        return 0
    else
        log "ERROR: Generated exports file is empty"
        return 1
    fi
}

# Function to apply exports
apply_exports() {
    log "Applying exports configuration..."
    
    # Backup current exports
    cp "$EXPORTS_FILE" "${EXPORTS_FILE}.backup.$(date +%Y%m%d_%H%M%S)" 2>/dev/null
    
    # Copy temporary file to /etc/exports
    cp "$TEMP_EXPORTS" "$EXPORTS_FILE"
    
    if [[ $? -eq 0 ]]; then
        log "Exports file updated successfully"
        
        # Reload NFS exports
        exportfs -ra
        if [[ $? -eq 0 ]]; then
            log "NFS exports reloaded successfully"
        else
            log "ERROR: Failed to reload NFS exports"
            return 1
        fi
    else
        log "ERROR: Failed to update exports file"
        return 1
    fi
    
    return 0
}

# Function to monitor configuration file
monitor_config() {
    log "Starting configuration monitor..."
    
    # Initial generation
    if generate_exports; then
        apply_exports
    fi
    
    # Monitor for changes
    while true; do
        if [[ -f "$CONFIG_FILE" ]]; then
            # Check if file has been modified
            if [[ "$CONFIG_FILE" -nt "$EXPORTS_FILE" ]] || [[ ! -f "$EXPORTS_FILE" ]]; then
                log "Configuration file changed, regenerating exports..."
                
                if generate_exports; then
                    if apply_exports; then
                        log "Configuration applied successfully"
                    else
                        log "ERROR: Failed to apply configuration"
                    fi
                else
                    log "ERROR: Failed to generate exports"
                fi
            fi
        fi
        
        # Wait before checking again
        sleep 2
    done
}

# Main execution
main() {
    log "NFS Configuration Manager starting..."
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        log "ERROR: This script must be run as root"
        exit 1
    fi
    
    # Create log file if it doesn't exist
    touch "$LOG_FILE"
    
    # Start monitoring
    monitor_config
}

# Run main function
main "$@"
